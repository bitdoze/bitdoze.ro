---
import { Icon } from "astro-icon/components";

interface Props {
  title: string;
  subtitle?: string;
  alignment?: "left" | "center" | "right";
  textSize?: "sm" | "md" | "lg";
  decorative?: boolean;
  badge?: {
    text: string;
    type?: "primary" | "secondary" | "accent" | "success";
    icon?: string;
  };
  className?: string;
}

const {
  title,
  subtitle,
  alignment = "center",
  textSize = "md",
  decorative = true,
  badge,
  className = "",
} = Astro.props;

const alignmentClasses = {
  left: "text-left",
  center: "text-center mx-auto",
  right: "text-right ml-auto",
};

const titleSizeClasses = {
  sm: "text-2xl md:text-3xl",
  md: "text-3xl md:text-4xl lg:text-5xl",
  lg: "text-4xl md:text-5xl lg:text-6xl",
};

const subtitleSizeClasses = {
  sm: "text-base",
  md: "text-lg md:text-xl",
  lg: "text-xl md:text-2xl",
};

const widthClasses = {
  left: "max-w-3xl",
  center: "max-w-3xl mx-auto",
  right: "max-w-3xl ml-auto",
};
---

<div class={`section-header ${alignmentClasses[alignment]} ${className}`}>
  <!-- Badge -->
  {
    badge && (
      <div class={`header-badge badge-${badge.type || "primary"}`}>
        {badge.icon && <Icon name={badge.icon} class="badge-icon" />}
        <span class="badge-text">{badge.text}</span>
      </div>
    )
  }

  <!-- Title -->
  <h2 class={`section-title ${titleSizeClasses[textSize]}`}>
    <span class="title-text">{title}</span>
    {
      decorative && (
        <div class="title-decoration">
          <div class="decoration-line" />
          <div class="decoration-dot" />
        </div>
      )
    }
  </h2>

  <!-- Subtitle -->
  {
    subtitle && (
      <div class={`subtitle-wrapper ${widthClasses[alignment]}`}>
        <p class={`section-subtitle ${subtitleSizeClasses[textSize]}`}>
          {subtitle}
        </p>
      </div>
    )
  }

  <!-- Animated background elements -->
  <div class="header-bg-elements">
    <div class="bg-element element-1"></div>
    <div class="bg-element element-2"></div>
  </div>
</div>

<style>
  .section-header {
    position: relative;
    margin-bottom: 4rem;
    overflow: hidden;
  }

  /* Badge styling */
  .header-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 50px;
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: fadeInUp 0.8s ease-out 0.1s forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  .badge-icon {
    width: 16px;
    height: 16px;
  }

  .badge-primary {
    background: rgba(var(--color-primary-rgb), 0.1);
    color: var(--color-primary);
    border-color: rgba(var(--color-primary-rgb), 0.2);
  }

  .badge-secondary {
    background: rgba(var(--color-secondary-rgb), 0.1);
    color: var(--color-secondary);
    border-color: rgba(var(--color-secondary-rgb), 0.2);
  }

  .badge-accent {
    background: rgba(var(--color-accent-rgb), 0.1);
    color: var(--color-accent);
    border-color: rgba(var(--color-accent-rgb), 0.2);
  }

  .badge-success {
    background: rgba(var(--color-success-rgb), 0.1);
    color: var(--color-success);
    border-color: rgba(var(--color-success-rgb), 0.2);
  }

  /* Title styling */
  .section-title {
    font-weight: 800;
    line-height: 1.2;
    margin-bottom: 1.5rem;
    position: relative;
    animation: fadeInUp 0.8s ease-out 0.2s forwards;
    opacity: 0;
    transform: translateY(30px);
  }

  .title-text {
    background: linear-gradient(
      135deg,
      var(--color-text) 0%,
      var(--color-text) 60%,
      var(--color-primary) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: inline-block;
    position: relative;
  }

  .title-decoration {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 1rem;
    animation: decorationGlow 2s ease-in-out infinite alternate;
  }

  .decoration-line {
    width: 60px;
    height: 3px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--color-primary),
      var(--color-secondary),
      transparent
    );
    border-radius: 2px;
    position: relative;
    overflow: hidden;
  }

  .decoration-line::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.4),
      transparent
    );
    animation: shimmer 3s linear infinite;
  }

  .decoration-dot {
    width: 8px;
    height: 8px;
    background: var(--color-primary);
    border-radius: 50%;
    position: relative;
    box-shadow: 0 0 20px rgba(var(--color-primary-rgb), 0.5);
    animation: dotPulse 2s ease-in-out infinite;
  }

  @keyframes shimmer {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }

  @keyframes dotPulse {
    0%,
    100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.3);
      opacity: 0.8;
    }
  }

  @keyframes decorationGlow {
    0% {
      filter: brightness(1);
    }
    100% {
      filter: brightness(1.2);
    }
  }

  /* Subtitle styling */
  .subtitle-wrapper {
    animation: fadeInUp 0.8s ease-out 0.3s forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  .section-subtitle {
    color: var(--color-text-light);
    line-height: 1.6;
    font-weight: 400;
    margin: 0;
  }

  /* Background elements */
  .header-bg-elements {
    position: absolute;
    inset: 0;
    pointer-events: none;
    overflow: hidden;
  }

  .bg-element {
    position: absolute;
    border-radius: 50%;
    filter: blur(40px);
    opacity: 0.1;
  }

  .element-1 {
    width: 200px;
    height: 200px;
    top: -50px;
    right: -50px;
    background: var(--color-primary);
    animation: floatBg 8s ease-in-out infinite;
  }

  .element-2 {
    width: 150px;
    height: 150px;
    bottom: -30px;
    left: -30px;
    background: var(--color-secondary);
    animation: floatBg 6s ease-in-out infinite reverse;
  }

  @keyframes floatBg {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }
    50% {
      transform: translate(20px, -20px) scale(1.1);
    }
  }

  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Text alignment specific styles */
  .text-left .title-decoration {
    justify-content: flex-start;
  }

  .text-right .title-decoration {
    justify-content: flex-end;
  }

  /* Dark mode adjustments */
  :global(.dark) .title-text {
    background: linear-gradient(
      135deg,
      var(--color-dark-text) 0%,
      var(--color-dark-text) 60%,
      var(--color-primary-light) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  :global(.dark) .section-subtitle {
    color: var(--color-dark-text-light);
  }

  :global(.dark) .bg-element {
    opacity: 0.05;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .section-header {
      margin-bottom: 3rem;
    }

    .header-badge {
      padding: 0.5rem 1rem;
      font-size: 0.75rem;
    }

    .title-decoration {
      margin-top: 0.75rem;
    }

    .decoration-line {
      width: 40px;
      height: 2px;
    }

    .decoration-dot {
      width: 6px;
      height: 6px;
    }

    .bg-element {
      display: none;
    }
  }

  /* Intersection Observer trigger */
  .section-header {
    opacity: 0;
    animation: sectionFadeIn 0.8s ease-out forwards;
  }

  @keyframes sectionFadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const headerElements = document.querySelectorAll(".section-header");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const header = entry.target as HTMLElement;
            header.style.animationPlayState = "running";

            // Trigger child animations
            const badge = header.querySelector(".header-badge");
            const title = header.querySelector(".section-title");
            const subtitle = header.querySelector(".subtitle-wrapper");

            if (badge) {
              (badge as HTMLElement).style.animationPlayState = "running";
            }
            if (title) {
              (title as HTMLElement).style.animationPlayState = "running";
            }
            if (subtitle) {
              (subtitle as HTMLElement).style.animationPlayState = "running";
            }

            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.1,
        rootMargin: "0px 0px -10% 0px",
      }
    );

    headerElements.forEach((element) => {
      observer.observe(element);
    });
  });
</script>
