---
import { Icon } from 'astro-icon/components';
import { ctaConfig } from "../config/cta";
import { imageAssets } from "../config/assets";

interface Props {
  title?: string;
  subtitle?: string;
  ctaText?: string;
  ctaLink?: string;
  secondaryText?: string;
  secondaryLink?: string;
  trustedBy?: string;
}

const {
  title = ctaConfig.title,
  subtitle = ctaConfig.description,
  ctaText = ctaConfig.primaryAction.text,
  ctaLink = ctaConfig.primaryAction.href,
  secondaryText = ctaConfig.secondaryAction?.text || "Află Mai Multe",
  secondaryLink = ctaConfig.secondaryAction?.href || "/services",
  trustedBy = ctaConfig.trustedBy || "De încredere pentru companii de top din România"
} = Astro.props;
---

<section class="section-padding overflow-hidden relative">
  <!-- Background elements for visual interest -->
  <div class="absolute inset-0 bg-gradient-to-br" style="background: linear-gradient(to bottom right, var(--color-primary), var(--color-secondary-dark))"></div>
  <div class="absolute inset-0 bg-grid opacity-20"></div>
  <div class="absolute -right-64 -top-64 w-96 h-96 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob" style="background-color: var(--color-secondary)"></div>
  <div class="absolute -left-64 -bottom-64 w-96 h-96 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob animation-delay-2000" style="background-color: var(--color-primary-light)"></div>
  
  <div class="container mx-auto relative z-10">
    <div class="text-center cta-content bg-white/5 backdrop-blur-lg p-12" style="border-radius: var(--radius-2xl); box-shadow: var(--shadow-xl); border: 1px solid rgba(255, 255, 255, 0.1);">
      <h2 class="text-4xl font-bold text-white mb-6">{title}</h2>
      <p class="text-xl text-white/80 max-w-3xl mx-auto mb-10">{subtitle}</p>
      
      <div class="flex flex-col sm:flex-row justify-center gap-4">
        <a href={ctaLink} class="btn-glow inline-flex h-12 items-center justify-center px-8 font-semibold text-white hover:translate-y-[-2px]" style="background-color: var(--color-accent); border-radius: var(--radius-lg); box-shadow: var(--shadow-md); transition: all var(--transition-normal);">
          {ctaText}
        </a>
        <a href={secondaryLink} class="inline-flex h-12 items-center justify-center px-8 font-semibold text-white hover:bg-white/10" style="border-radius: var(--radius-lg); border: 1px solid rgba(255, 255, 255, 0.3); transition: all var(--transition-normal);">
          {secondaryText}
        </a>
      </div>
      
      <!-- Trust badges -->
      <div class="mt-12 flex flex-col items-center">
        <p class="text-white/70 text-sm mb-4">{trustedBy}</p>
        <div class="flex flex-wrap justify-center gap-x-8 gap-y-4">
          {imageAssets.logos.trustedBadges.slice(0, 3).map(badge => (
            <div class="h-8 w-auto brightness-0 invert opacity-50 hover:opacity-100 transition-opacity">
              <svg class="h-full" viewBox="0 0 168 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d={badge.svgPath} stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                {badge.id === "badge3" && <circle cx="59" cy="20" r="3" fill="currentColor"/>}
              </svg>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Gradient background with grid pattern */
  .bg-grid {
    background-size: 40px 40px;
    background-image: 
      linear-gradient(to right, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
  }
  
  /* Button glow effect */
  .btn-glow {
    position: relative;
  }
  
  .btn-glow:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: var(--radius-lg);
    box-shadow: 0 0 25px 5px rgba(255, 255, 255, 0.4);
    opacity: 0;
    transition: opacity var(--transition-normal) ease;
  }
  
  .btn-glow:hover:before {
    opacity: 1;
  }
  
  /* BLOB Animations */
  @keyframes animate-blob {
    0% {
      transform: translate(0px, 0px) scale(1);
    }
    33% {
      transform: translate(30px, -50px) scale(1.1);
    }
    66% {
      transform: translate(-20px, 20px) scale(0.9);
    }
    100% {
      transform: translate(0px, 0px) scale(1);
    }
  }
  
  .animate-blob {
    animation: animate-blob 7s ease-in-out infinite;
  }
  
  .animation-delay-2000 {
    animation-delay: 2s;
  }
  
  /* Subtle floating animation for the CTA content */
  .cta-content {
    animation: gentle-float 6s ease-in-out infinite;
  }
  
  @keyframes gentle-float {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0px);
    }
  }
</style>