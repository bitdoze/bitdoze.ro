---
import { Icon } from "astro-icon/components";
import { navConfig } from "../config/nav";
import { companyConfig } from "../config/company";
import ThemeToggle from "./ThemeToggle.astro";

interface Props {
  logoText?: string;
  ctaButton?: {
    text: string;
    href: string;
  };
}

const { logoText = companyConfig.logo.text, ctaButton = navConfig.ctaButton } =
  Astro.props;
---

<header
  class="header-nav sticky top-0 z-40 w-full backdrop-blur-lg transition-all duration-500 ease-in-out"
  style="background-color: rgba(var(--color-background-rgb), 0.85); border-bottom: 1px solid rgba(var(--color-text-rgb), 0.1);"
>
  <div class="container mx-auto flex h-16 items-center justify-between">
    <!-- Logo -->
    <div class="flex shrink-0 items-center">
      <a href="/" class="logo-link flex items-center gap-2 group">
        <img
          src="/bitdoze_logo_better.svg"
          alt="BitDoze"
          class="h-8 w-auto transition-transform duration-300 group-hover:scale-105"
        />
      </a>
    </div>

    <!-- Navigation -->
    <nav class="hidden md:flex items-center space-x-2">
      {
        navConfig.mainNav.map((item) => (
          <a
            href={item.href}
            class="nav-item relative px-4 py-2 text-sm font-medium rounded-lg transition-all duration-300 ease-in-out group"
            style="color: var(--color-text);"
            aria-disabled={item.disabled}
          >
            <span class="relative z-10">{item.title}</span>
            <div
              class="nav-bg absolute inset-0 rounded-lg bg-gradient-to-r from-transparent via-transparent to-transparent opacity-0 transition-all duration-300 ease-in-out group-hover:opacity-100"
              style="background: linear-gradient(135deg, rgba(var(--color-primary-rgb), 0.1), rgba(var(--color-secondary-rgb), 0.05));"
            />
            <div
              class="nav-indicator absolute bottom-0 left-1/2 h-0.5 w-0 rounded-full transition-all duration-300 ease-in-out group-hover:w-3/4 group-hover:-translate-x-1/2"
              style="background-color: var(--color-primary);"
            />
          </a>
        ))
      }
    </nav>

    <!-- Primary Action Button -->
    <div class="hidden md:flex items-center space-x-3">
      <ThemeToggle />
      {
        ctaButton && (
          <a
            href={ctaButton.href}
            class="btn btn-primary btn-sm"
          >
            <span class="flex items-center gap-2">{ctaButton.text}<Icon name="mdi:arrow-right" class="h-4 w-4" /></span>
          </a>
        )
      }
    </div>

    <!-- Mobile menu button -->
    <div class="flex md:hidden items-center gap-2">
      <ThemeToggle />
      <button
        type="button"
        id="mobile-menu-button"
        aria-expanded="false"
        class="mobile-menu-btn inline-flex items-center justify-center p-3 rounded-lg min-h-[48px] min-w-[48px] transition-all duration-300 ease-in-out hover:scale-105 active:scale-95 focus:outline-none"
        style="background-color: rgba(var(--color-text-rgb), 0.05); backdrop-filter: blur(8px);"
      >
        <span class="sr-only">Open main menu</span>
        <div
          class="hamburger relative w-6 h-6 flex flex-col justify-center items-center"
        >
          <span
            class="hamburger-line w-5 h-0.5 rounded-full transition-all duration-300"
            style="background-color: var(--color-text); transform: translateY(-2px);"
          ></span>
          <span
            class="hamburger-line w-5 h-0.5 rounded-full transition-all duration-300 mt-1"
            style="background-color: var(--color-text);"></span>
          <span
            class="hamburger-line w-5 h-0.5 rounded-full transition-all duration-300 mt-1"
            style="background-color: var(--color-text); transform: translateY(2px);"
          ></span>
        </div>
      </button>
    </div>
  </div>

  <!-- Mobile menu, show/hide based on menu state. -->
  <div
    id="mobile-menu"
    class="mobile-menu fixed top-16 left-0 right-0 hidden md:hidden transition-all duration-500 ease-in-out transform -translate-y-2 opacity-0 z-50"
    style="background: linear-gradient(135deg, rgba(var(--color-background-rgb), 0.95), rgba(var(--color-background-rgb), 0.9)); backdrop-filter: blur(20px); box-shadow: 0 8px 32px rgba(var(--color-text-rgb), 0.15); border-top: 1px solid rgba(var(--color-text-rgb), 0.1);"
  >
    <div class="space-y-1 p-6">
      {
        navConfig.mainNav.map((item, index) => (
          <a
            href={item.href}
            class="mobile-menu-item group flex px-4 py-4 text-base font-medium rounded-xl transition-all duration-300 min-h-[48px] items-center justify-between relative overflow-hidden"
            style="transition: all var(--transition-normal); animation-delay: ${index * 50}ms;"
            aria-disabled={item.disabled}
          >
            <span class="relative z-10 transition-transform duration-300 group-hover:translate-x-1">
              {item.title}
            </span>
            <Icon
              name="mdi:chevron-right"
              class="w-5 h-5 opacity-0 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-1"
              style="color: var(--color-primary);"
            />
            <div
              class="absolute inset-0 bg-gradient-to-r opacity-0 transition-all duration-300 rounded-xl group-hover:opacity-100"
              style="background: linear-gradient(135deg, rgba(var(--color-primary-rgb), 0.1), rgba(var(--color-secondary-rgb), 0.05));"
            />
          </a>
        ))
      }
    </div>
    <div
      class="border-t px-6 py-4"
      style="border-color: rgba(var(--color-text-rgb), 0.1);"
    >
      { ctaButton && (
        <a href={ctaButton.href} class="btn btn-primary w-full h-12 text-base">
          <span class="flex items-center justify-center gap-2">{ctaButton.text}<Icon name="mdi:arrow-right" class="h-4 w-4" /></span>
        </a>
      ) }
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle functionality with enhanced animations
  document.addEventListener("DOMContentLoaded", () => {
    const menuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const hamburger = menuButton?.querySelector(".hamburger");
    const hamburgerLines = hamburger?.querySelectorAll(".hamburger-line");

    if (menuButton && mobileMenu && hamburgerLines) {
      menuButton.addEventListener("click", () => {
        const expanded = menuButton.getAttribute("aria-expanded") === "true";
        const isOpening = !expanded;

        menuButton.setAttribute("aria-expanded", isOpening.toString());

        if (isOpening) {
          // Show menu with animation
          mobileMenu.classList.remove("hidden");
          requestAnimationFrame(() => {
            mobileMenu.classList.remove("-translate-y-2", "opacity-0");
            mobileMenu.classList.add("translate-y-0", "opacity-100");
          });

          // Animate hamburger to X
          (hamburgerLines[0] as HTMLElement).style.transform =
            "rotate(45deg) translateY(3px)";
          (hamburgerLines[1] as HTMLElement).style.opacity = "0";
          (hamburgerLines[2] as HTMLElement).style.transform =
            "rotate(-45deg) translateY(-3px)";
        } else {
          // Hide menu with animation
          mobileMenu.classList.remove("translate-y-0", "opacity-100");
          mobileMenu.classList.add("-translate-y-2", "opacity-0");

          // Reset hamburger
          (hamburgerLines[0] as HTMLElement).style.transform =
            "translateY(-2px)";
          (hamburgerLines[1] as HTMLElement).style.opacity = "1";
          (hamburgerLines[2] as HTMLElement).style.transform =
            "translateY(2px)";

          setTimeout(() => {
            mobileMenu.classList.add("hidden");
          }, 500);
        }
      });

      // Close mobile menu when clicking on links
      const mobileMenuItems = mobileMenu.querySelectorAll(".mobile-menu-item");
      mobileMenuItems.forEach((item) => {
        item.addEventListener("click", () => {
          menuButton.click(); // Trigger close
        });
      });
    }

    // Header scroll effect
    let lastScrollY = window.scrollY;
    const header = document.querySelector(".header-nav");

    window.addEventListener("scroll", () => {
      const scrollY = window.scrollY;

      if (header) {
        const headerEl = header as HTMLElement;
        if (scrollY > 100) {
          headerEl.style.backgroundColor =
            "rgba(var(--color-background-rgb), 0.95)";
          headerEl.style.boxShadow =
            "0 4px 20px rgba(var(--color-text-rgb), 0.1)";
        } else {
          headerEl.style.backgroundColor =
            "rgba(var(--color-background-rgb), 0.85)";
          headerEl.style.boxShadow = "none";
        }
      }

      lastScrollY = scrollY;
    });
  });
</script>

<style>
  /* Header enhancements */
  .header-nav {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    height: 64px;
    min-height: 64px;
    max-height: 64px;
    overflow: visible;
  }

  /* Ensure mobile menu doesn't affect desktop */
  @media (min-width: 768px) {
    .mobile-menu {
      display: none !important;
    }
  }

  /* Logo animation */
  .logo-link {
    transition: all 0.3s ease;
  }

  .logo-link:hover {
    filter: drop-shadow(0 4px 8px rgba(var(--color-primary-rgb), 0.3));
  }

  /* Navigation item enhancements */
  .nav-item {
    position: relative;
    overflow: hidden;
  }

  .nav-item:hover {
    color: var(--color-primary);
    transform: translateY(-1px);
  }

  .nav-item:active {
    transform: translateY(0);
  }

  /* CTA Button enhancements */
  /* CTA uses global .btn tokens now */

  /* Mobile menu enhancements */
  .mobile-menu {
    max-height: calc(100vh - 64px);
    overflow-y: auto;
  }

  @media (max-width: 767px) {
    .mobile-menu.hidden {
      display: block !important;
      pointer-events: none;
    }
  }

  @media (min-width: 768px) {
    .mobile-menu {
      display: none !important;
      visibility: hidden !important;
      height: 0 !important;
      overflow: hidden !important;
    }
  }

  .mobile-menu-item {
    position: relative;
    overflow: hidden;
  }

  .mobile-menu-item:hover {
    color: var(--color-primary);
    transform: translateX(4px);
  }

  .mobile-menu-item:active {
    transform: translateX(2px) scale(0.98);
  }

  /* Mobile menu button */
  .mobile-menu-btn:hover {
    background-color: rgba(var(--color-text-rgb), 0.1);
    box-shadow: 0 4px 12px rgba(var(--color-text-rgb), 0.15);
  }

  /* Hamburger animation */
  .hamburger-line {
    transform-origin: center;
  }

  /* Dark mode adjustments */
  :global(.dark) .header-nav {
    background-color: rgba(var(--color-dark-background-rgb), 0.85);
    border-bottom-color: rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .mobile-menu {
    background: linear-gradient(
      135deg,
      rgba(var(--color-dark-background-rgb), 0.95),
      rgba(var(--color-dark-background-rgb), 0.9)
    );
    border-top-color: rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .mobile-menu-btn {
    background-color: rgba(255, 255, 255, 0.05);
  }

  :global(.dark) .mobile-menu-btn:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .mobile-menu-item {
      animation: slideInFromRight 0.3s ease-out forwards;
      opacity: 0;
      transform: translateX(20px);
    }
  }

  @keyframes slideInFromRight {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Smooth scrolling improvements */
  @media (prefers-reduced-motion: no-preference) {
    .nav-item,
    .mobile-menu-item {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
  }

  /* Focus states for accessibility */
  .nav-item:focus-visible,
  .mobile-menu-item:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  /* CTA focus handled by global .btn */
</style>
