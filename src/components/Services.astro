---
import { Icon } from 'astro-icon/components';
import { services } from "../config/services";
import ServiceCard from "./ServiceCard.astro";
import SectionHeader from "./SectionHeader.astro";

interface Props {
  sectionTitle?: string;
  sectionSubtitle?: string;
  showAllServices?: boolean;
  limit?: number;
  cta?: {
    text: string;
    link: string;
  };
  showBadges?: boolean;
}

const {
  sectionTitle = "Our Services",
  sectionSubtitle = "We offer comprehensive solutions to help your business thrive in today's competitive market.",
  showAllServices = true,
  limit = 6,
  cta = {
    text: "Learn More",
    link: "/servicii"
  },
  showBadges = false
} = Astro.props;

// Limit services if necessary
const displayedServices = showAllServices ? services : services.slice(0, limit);
---

<section class="section-padding relative overflow-hidden" style="background-color: var(--color-background);">
  <div class="absolute -top-40 -right-40 w-80 h-80 rounded-full opacity-5" style="background: radial-gradient(circle, var(--color-primary) 0%, transparent 70%);"></div>
  <div class="absolute -bottom-20 -left-20 w-64 h-64 rounded-full opacity-5" style="background: radial-gradient(circle, var(--color-accent) 0%, transparent 70%);"></div>
  <div class="container">
    <!-- Section header -->
    <SectionHeader
      title={sectionTitle}
      subtitle={sectionSubtitle}
      alignment="center"
      textSize="md"
      decorative={true}
      className="mb-20"
    />
    
    <!-- Services grid -->
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {displayedServices.map((service, index) => (
            <ServiceCard 
              title={service.title}
              description={service.description}
              icon={service.icon}
              link={service.link}
              ctaText={cta.text}
              index={index}
              badge={showBadges && index === 0 ? {text: "Popular", type: "primary"} : 
                     showBadges && index === 1 ? {text: "Recomandat", type: "accent"} : 
                     showBadges && index === 2 ? {text: "Nou", type: "success"} : undefined}
            />
          ))}
        </div>

    {!showAllServices && services.length > limit && (
      <div class="text-center mt-12">
        <a 
          href="/servicii" 
          class="btn btn-primary inline-flex items-center justify-center h-12 px-6 font-medium"
        >
          View All Services
        </a>
      </div>
    )}
    
    {!showAllServices && cta && (
      <div class="text-center mt-8">
        <a 
          href={cta.link} 
          class="btn btn-secondary inline-flex items-center justify-center h-12 px-6 font-medium"
          style="border: 1px solid var(--color-text-lighter); border-radius: var(--radius-lg);"
        >
          {cta.text}
          <Icon name="mdi:arrow-right" class="ml-2 h-5 w-5" />
        </a>
      </div>
    )}
  </div>
</section>

<script>
  // Intersection Observer to trigger animations when elements enter viewport
  document.addEventListener('DOMContentLoaded', () => {
    const serviceCards = document.querySelectorAll('.service-card');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.animationPlayState = 'running';
          // Unobserve after triggering animation
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1
    });
    
    serviceCards.forEach(element => {
      observer.observe(element);
    });
  });
</script>